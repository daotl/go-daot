// Code generated by github.com/daotl/cbor-gen. DO NOT EDIT.

package test

import (
	"fmt"
	"io"
	"math"
	"sort"

	cbg "github.com/daotl/cbor-gen"
	model "github.com/daotl/go-doubl/model"
	cid "github.com/ipfs/go-cid"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *TransactionNoSig) InitNilEmbeddedStruct() {
	if t != nil {
	}
}

var lengthBufTransactionNoSig = []byte{134}

func (t *TransactionNoSig) MarshalCBOR(w io.Writer) (n int, err error) {
	if t == nil {
		return w.Write(cbg.CborNull)
	}
	t.InitNilEmbeddedStruct()
	if n_, err := w.Write(lengthBufTransactionNoSig); err != nil {
		return n_, err
	} else {
		n += n_
	}

	scratch := make([]byte, 9)

	// t.Type (model.TransactionType) (uint8)
	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.From (bytes.HexBytes) (slice)
	if len(t.From) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.From was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.From))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.From[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Nonce (uint64) (uint64)

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Nonce)); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.To (bytes.HexBytes) (slice)
	if len(t.To) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.To was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.To))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.To[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Data ([]uint8) (slice)
	if len(t.Data) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Data was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Data))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Data[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	// t.Extra ([]uint8) (slice)
	if len(t.Extra) > cbg.ByteArrayMaxLen {
		return n, xerrors.Errorf("Byte array in field t.Extra was too long")
	}

	if n_, err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Extra))); err != nil {
		return n + n_, err
	} else {
		n += n_
	}

	if n_, err := w.Write(t.Extra[:]); err != nil {
		return n + n_, err
	} else {
		n += n_
	}
	return n, nil
}

func (t *TransactionNoSig) UnmarshalCBOR(r io.Reader) (int, error) {
	bytesRead := 0
	*t = TransactionNoSig{}
	t.InitNilEmbeddedStruct()

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, read, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajArray {
		return bytesRead, fmt.Errorf("cbor input should be of type array")
	}

	if extra != 6 {
		return bytesRead, fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Type (model.TransactionType) (uint8)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read
	if maj != cbg.MajUnsignedInt {
		return bytesRead, fmt.Errorf("wrong type for uint8 field")
	}
	if extra > math.MaxUint8 {
		return bytesRead, fmt.Errorf("integer in input was too large for uint8 field")
	}
	t.Type = model.TransactionType(extra)
	// t.From (bytes.HexBytes) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.From: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.From = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.From[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Nonce (uint64) (uint64)

	{

		maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return bytesRead, err
		}
		bytesRead += read
		if maj != cbg.MajUnsignedInt {
			return bytesRead, fmt.Errorf("wrong type for uint64 field")
		}
		t.Nonce = uint64(extra)

	}
	// t.To (bytes.HexBytes) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.To: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.To = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.To[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Data ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Data: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Data = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Data[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	// t.Extra ([]uint8) (slice)

	maj, extra, read, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return bytesRead, err
	}
	bytesRead += read

	if extra > cbg.ByteArrayMaxLen {
		return bytesRead, fmt.Errorf("t.Extra: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return bytesRead, fmt.Errorf("expected byte array")
	}

	if extra > 0 {
		t.Extra = make([]uint8, extra)
	}

	if read, err := io.ReadFull(br, t.Extra[:]); err != nil {
		return bytesRead, err
	} else {
		bytesRead += read
	}
	return bytesRead, nil
}
